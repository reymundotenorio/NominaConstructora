package Ventanas;


import Clases.Conexion;
import java.awt.Color;
import java.awt.Component;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FI23
 */
public class Ver_Nomina extends javax.swing.JFrame {

    /**
     * Creates new form Ver
     */
    public Ver_Nomina() {
        initComponents();
         Tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbbuscar = new javax.swing.JComboBox();
        txtbuscar = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Ver Nómina");
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Tabla.getTableHeader().setReorderingAllowed(false);
        Tabla.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TablaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TablaFocusLost(evt);
            }
        });
        Tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Tabla);

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jLabel1.setText("Buscar Por:");

        cmbbuscar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No.", "No. Nómina", "Trabajador", "No. INSS", "Departamento", "Cargo", "Estado" }));

        txtbuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtbuscarKeyReleased(evt);
            }
        });

        jButton1.setText("Mostar Todo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Reporte Nómina");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtbuscar, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(txtbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(2, 2, 2))
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        setSize(new java.awt.Dimension(679, 386));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

     DefaultTableModel model = new DefaultTableModel() {

    @Override
    public boolean isCellEditable(int row, int column) {
       //all cells false
       return false;
    }
}; 
     
        public class FormatoTablaTrabajador extends DefaultTableCellRenderer
{
 @Override
 public Component getTableCellRendererComponent
 (JTable table, Object value, boolean selected, boolean focused, int row, int column)
 {
         
  if(String.valueOf(table.getValueAt(row,23)).equalsIgnoreCase("No Cancelado"))  {
      setForeground(Color.RED);
  }
   else { setForeground(Color.BLACK);
   }
  
          
    
 super.getTableCellRendererComponent(table, value, selected, focused, row, column);
 return this;
 }
 }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

       Tabla.setDefaultRenderer(Object.class, new FormatoTablaTrabajador());
        
       String [] Titulo = {"No.", "No. Nomina", "Fecha","Trabajador", "No. INSS", "Departamento", 
            "Cargo", "Salario Básico", "Horas Extras", "Ingreso Horas Extras","Años Antiguedad",
            "Ingreso Antiguedad",  "Total Ingresos", "INSS Laboral", "IR", "Total Deducciones", 
            "Salario Neto", "Otras Deducciones",  "Salario a Pagar", "INSS Patronal", "INATEC",
            "Vacaciones", "Treceavo Mes", "Estado"};
        
        model.setColumnIdentifiers(Titulo);
        
        Tabla.setModel(model);
        
        MostrarTodo();
        
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
MostrarTodo();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtbuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbuscarKeyReleased
Buscar();        // TODO add your handling code here:
    }//GEN-LAST:event_txtbuscarKeyReleased

    private void TablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMouseClicked
 
// TODO add your handling code here:
    }//GEN-LAST:event_TablaMouseClicked

    private void TablaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TablaFocusGained
   // TODO add your handling code here:
    }//GEN-LAST:event_TablaFocusGained

    private void TablaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TablaFocusLost
       // TODO add your handling code here:
    }//GEN-LAST:event_TablaFocusLost

    private String Usuario;

    public void setUsuario(String Usuario) {
        this.Usuario = Usuario;
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        SeleccionarParametro SP = new SeleccionarParametro(this, true);
        SP.setUsuario(Usuario);
        SP.setVer(this);
        SP.setVisible(true);
        
// TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    ResultSet resultado;
    
    public void MostrarTodo(){
        
        
        model.setRowCount(0);
        
       int NoNomina = 0;
       int NoNominaV = 0;
       
            try {
                resultado = Conexion.consulta("Select * from [dbo].[NominaV]");
            
        
        while(resultado.next()){
           
            String [] Titulo = new String[24];
            
            Titulo [0] = String.valueOf(resultado.getInt(1));
            
           
            
            NoNomina = resultado.getInt(2);
            
             if(NoNomina!=0){
                
                 if(NoNomina==1){
                     NoNominaV = NoNomina;                   
                 }
                 else{
                if(NoNomina!=NoNominaV){
                    
                    String [] Dato = {" "," "," "," "," "," "," "," "," "," ",
                    " "," "," "," "," "," "," "," "," "," "," "," "," "," ",};
                    model.addRow(Dato);
                    NoNominaV = NoNomina;
                }
                 }
            }
            
            Titulo [1] = String.valueOf(NoNomina);
            Titulo [2] = String.valueOf(resultado.getDate(3));
            
            String Nombres = resultado.getString(4).trim();
            String Apellidos = resultado.getString(5).trim();
            
            Titulo [3] = Nombres.concat(" ").concat(Apellidos);
            Titulo [4] = resultado.getString(6);
            Titulo [5] = resultado.getString(7);
            Titulo [6] = resultado.getString(8);
            Titulo [7] = String.valueOf(resultado.getDouble(9));
            Titulo [8] = String.valueOf(resultado.getInt(10));
            Titulo [9] = String.valueOf(resultado.getDouble(11));
            Titulo [10] = String.valueOf(resultado.getInt(12));
            Titulo [11] = String.valueOf(resultado.getDouble(13));
            Titulo [12] = String.valueOf(resultado.getDouble(14));
            Titulo [13] = String.valueOf(resultado.getDouble(15));
            Titulo [14] = String.valueOf(resultado.getDouble(16));
            Titulo [15] = String.valueOf(resultado.getDouble(17));
            Titulo [16] = String.valueOf(resultado.getDouble(18));
            Titulo [17] = String.valueOf(resultado.getDouble(19));
            Titulo [18] = String.valueOf(resultado.getDouble(20));
            Titulo [19] = String.valueOf(resultado.getDouble(21));
            Titulo [20] = String.valueOf(resultado.getDouble(22));
            Titulo [21] = String.valueOf(resultado.getDouble(23));
            Titulo [22] = String.valueOf(resultado.getDouble(24));
            Titulo [23] = resultado.getString(25);
            
            
            model.addRow(Titulo);
            
            
            
        }
        } catch (SQLException ex) {
                     
            JOptionPane.showMessageDialog(null, "Error Al Realizar Consulta"); 
            return; 
}
        Tabla.setModel(model);
           
        
    }
    
    
    public void Buscar(){
        
        
        int index = cmbbuscar.getSelectedIndex()+1;
        
        String Buscar = txtbuscar.getText();
        
     switch (index){
         
         case 1:
        
          model.setRowCount(0);
        
       
            try {
                resultado = Conexion.consulta("Select * from [dbo].[NominaV] where "
                        + "[ID_Nomina] like '%"+Buscar+"%'");
            
        
        while(resultado.next()){
           
           String [] Titulo = new String[24];
            
            Titulo [0] = String.valueOf(resultado.getInt(1));
            Titulo [1] = String.valueOf(resultado.getInt(2));
            Titulo [2] = String.valueOf(resultado.getDate(3));
            
            String Nombres = resultado.getString(4).trim();
            String Apellidos = resultado.getString(5).trim();
            
            Titulo [3] = Nombres.concat(" ").concat(Apellidos);
            Titulo [4] = resultado.getString(6);
            Titulo [5] = resultado.getString(7);
            Titulo [6] = resultado.getString(8);
            Titulo [7] = String.valueOf(resultado.getDouble(9));
            Titulo [8] = String.valueOf(resultado.getInt(10));
            Titulo [9] = String.valueOf(resultado.getDouble(11));
            Titulo [10] = String.valueOf(resultado.getInt(12));
            Titulo [11] = String.valueOf(resultado.getDouble(13));
            Titulo [12] = String.valueOf(resultado.getDouble(14));
            Titulo [13] = String.valueOf(resultado.getDouble(15));
            Titulo [14] = String.valueOf(resultado.getDouble(16));
            Titulo [15] = String.valueOf(resultado.getDouble(17));
            Titulo [16] = String.valueOf(resultado.getDouble(18));
            Titulo [17] = String.valueOf(resultado.getDouble(19));
            Titulo [18] = String.valueOf(resultado.getDouble(20));
            Titulo [19] = String.valueOf(resultado.getDouble(21));
            Titulo [20] = String.valueOf(resultado.getDouble(22));
            Titulo [21] = String.valueOf(resultado.getDouble(23));
            Titulo [22] = String.valueOf(resultado.getDouble(24));
            Titulo [23] = resultado.getString(25);
            
            model.addRow(Titulo);
           
            
            model.addRow(Titulo);
            
            
        }
        } catch (SQLException ex) {
                     
            JOptionPane.showMessageDialog(null, "Error Al Realizar Búsqueda"); 
            return; 
}
             break;
      
             
             
               case 2:
          model.setRowCount(0);
        
       
            try {
                resultado = Conexion.consulta("Select * from [dbo].[NominaV] where "
                        + "[No_Nomina] like '%"+Buscar+"%'");
            
        
        while(resultado.next()){
           
           String [] Titulo = new String[24];
            
            Titulo [0] = String.valueOf(resultado.getInt(1));
            Titulo [1] = String.valueOf(resultado.getInt(2));
            Titulo [2] = String.valueOf(resultado.getDate(3));
            
            String Nombres = resultado.getString(4).trim();
            String Apellidos = resultado.getString(5).trim();
            
            Titulo [3] = Nombres.concat(" ").concat(Apellidos);
            Titulo [4] = resultado.getString(6);
            Titulo [5] = resultado.getString(7);
            Titulo [6] = resultado.getString(8);
            Titulo [7] = String.valueOf(resultado.getDouble(9));
            Titulo [8] = String.valueOf(resultado.getInt(10));
            Titulo [9] = String.valueOf(resultado.getDouble(11));
            Titulo [10] = String.valueOf(resultado.getInt(12));
            Titulo [11] = String.valueOf(resultado.getDouble(13));
            Titulo [12] = String.valueOf(resultado.getDouble(14));
            Titulo [13] = String.valueOf(resultado.getDouble(15));
            Titulo [14] = String.valueOf(resultado.getDouble(16));
            Titulo [15] = String.valueOf(resultado.getDouble(17));
            Titulo [16] = String.valueOf(resultado.getDouble(18));
            Titulo [17] = String.valueOf(resultado.getDouble(19));
            Titulo [18] = String.valueOf(resultado.getDouble(20));
            Titulo [19] = String.valueOf(resultado.getDouble(21));
            Titulo [20] = String.valueOf(resultado.getDouble(22));
            Titulo [21] = String.valueOf(resultado.getDouble(23));
            Titulo [22] = String.valueOf(resultado.getDouble(24));
            Titulo [23] = resultado.getString(25);
            
            model.addRow(Titulo);
           
            
            model.addRow(Titulo);
            
            
        }
        } catch (SQLException ex) {
                     
            JOptionPane.showMessageDialog(null, "Error Al Realizar Búsqueda"); 
            return; 
}
         
             break;
                   
                case 3:
        
          model.setRowCount(0);
        
       
            try {
                resultado = Conexion.consulta("Select * from [dbo].[NominaV] where "
                        + "[Nombres_Trabajador] + ' ' + [Apellidos_Trabajador]  like '%"+Buscar+"%'");
            
        
        while(resultado.next()){
           
           String [] Titulo = new String[24];
            
            Titulo [0] = String.valueOf(resultado.getInt(1));
            Titulo [1] = String.valueOf(resultado.getInt(2));
            Titulo [2] = String.valueOf(resultado.getDate(3));
            
            String Nombres = resultado.getString(4).trim();
            String Apellidos = resultado.getString(5).trim();
            
            Titulo [3] = Nombres.concat(" ").concat(Apellidos);
            Titulo [4] = resultado.getString(6);
            Titulo [5] = resultado.getString(7);
            Titulo [6] = resultado.getString(8);
            Titulo [7] = String.valueOf(resultado.getDouble(9));
            Titulo [8] = String.valueOf(resultado.getInt(10));
            Titulo [9] = String.valueOf(resultado.getDouble(11));
            Titulo [10] = String.valueOf(resultado.getInt(12));
            Titulo [11] = String.valueOf(resultado.getDouble(13));
            Titulo [12] = String.valueOf(resultado.getDouble(14));
            Titulo [13] = String.valueOf(resultado.getDouble(15));
            Titulo [14] = String.valueOf(resultado.getDouble(16));
            Titulo [15] = String.valueOf(resultado.getDouble(17));
            Titulo [16] = String.valueOf(resultado.getDouble(18));
            Titulo [17] = String.valueOf(resultado.getDouble(19));
            Titulo [18] = String.valueOf(resultado.getDouble(20));
            Titulo [19] = String.valueOf(resultado.getDouble(21));
            Titulo [20] = String.valueOf(resultado.getDouble(22));
            Titulo [21] = String.valueOf(resultado.getDouble(23));
            Titulo [22] = String.valueOf(resultado.getDouble(24));
            Titulo [23] = resultado.getString(25);
            
            model.addRow(Titulo);
           
            
            model.addRow(Titulo);
            
            
        }
        } catch (SQLException ex) {
                     
            JOptionPane.showMessageDialog(null, "Error Al Realizar Búsqueda"); 
            return; 
}
             break;
                       
               
                case 4:
        
             model.setRowCount(0);
        
       
            try {
                resultado = Conexion.consulta("Select * from [dbo].[NominaV] where "
                        + "[No_Inss] like '%"+Buscar+"%'");
            
        
        while(resultado.next()){
           
           String [] Titulo = new String[24];
            
            Titulo [0] = String.valueOf(resultado.getInt(1));
            Titulo [1] = String.valueOf(resultado.getInt(2));
            Titulo [2] = String.valueOf(resultado.getDate(3));
            
            String Nombres = resultado.getString(4).trim();
            String Apellidos = resultado.getString(5).trim();
            
            Titulo [3] = Nombres.concat(" ").concat(Apellidos);
            Titulo [4] = resultado.getString(6);
            Titulo [5] = resultado.getString(7);
            Titulo [6] = resultado.getString(8);
            Titulo [7] = String.valueOf(resultado.getDouble(9));
            Titulo [8] = String.valueOf(resultado.getInt(10));
            Titulo [9] = String.valueOf(resultado.getDouble(11));
            Titulo [10] = String.valueOf(resultado.getInt(12));
            Titulo [11] = String.valueOf(resultado.getDouble(13));
            Titulo [12] = String.valueOf(resultado.getDouble(14));
            Titulo [13] = String.valueOf(resultado.getDouble(15));
            Titulo [14] = String.valueOf(resultado.getDouble(16));
            Titulo [15] = String.valueOf(resultado.getDouble(17));
            Titulo [16] = String.valueOf(resultado.getDouble(18));
            Titulo [17] = String.valueOf(resultado.getDouble(19));
            Titulo [18] = String.valueOf(resultado.getDouble(20));
            Titulo [19] = String.valueOf(resultado.getDouble(21));
            Titulo [20] = String.valueOf(resultado.getDouble(22));
            Titulo [21] = String.valueOf(resultado.getDouble(23));
            Titulo [22] = String.valueOf(resultado.getDouble(24));
            Titulo [23] = resultado.getString(25);
            
            model.addRow(Titulo);
           
            
            model.addRow(Titulo);
            
            
        }
        } catch (SQLException ex) {
                     
            JOptionPane.showMessageDialog(null, "Error Al Realizar Búsqueda"); 
            return; 
}
             break;
                           
                case 5:
        
         
           model.setRowCount(0);
        
       
            try {
                resultado = Conexion.consulta("Select * from [dbo].[NominaV] where "
                        + "[NombreDepartamento] like '%"+Buscar+"%'");
            
        
        while(resultado.next()){
           
           String [] Titulo = new String[24];
            
            Titulo [0] = String.valueOf(resultado.getInt(1));
            Titulo [1] = String.valueOf(resultado.getInt(2));
            Titulo [2] = String.valueOf(resultado.getDate(3));
            
            String Nombres = resultado.getString(4).trim();
            String Apellidos = resultado.getString(5).trim();
            
            Titulo [3] = Nombres.concat(" ").concat(Apellidos);
            Titulo [4] = resultado.getString(6);
            Titulo [5] = resultado.getString(7);
            Titulo [6] = resultado.getString(8);
            Titulo [7] = String.valueOf(resultado.getDouble(9));
            Titulo [8] = String.valueOf(resultado.getInt(10));
            Titulo [9] = String.valueOf(resultado.getDouble(11));
            Titulo [10] = String.valueOf(resultado.getInt(12));
            Titulo [11] = String.valueOf(resultado.getDouble(13));
            Titulo [12] = String.valueOf(resultado.getDouble(14));
            Titulo [13] = String.valueOf(resultado.getDouble(15));
            Titulo [14] = String.valueOf(resultado.getDouble(16));
            Titulo [15] = String.valueOf(resultado.getDouble(17));
            Titulo [16] = String.valueOf(resultado.getDouble(18));
            Titulo [17] = String.valueOf(resultado.getDouble(19));
            Titulo [18] = String.valueOf(resultado.getDouble(20));
            Titulo [19] = String.valueOf(resultado.getDouble(21));
            Titulo [20] = String.valueOf(resultado.getDouble(22));
            Titulo [21] = String.valueOf(resultado.getDouble(23));
            Titulo [22] = String.valueOf(resultado.getDouble(24));
            Titulo [23] = resultado.getString(25);
            
            model.addRow(Titulo);
           
            
            model.addRow(Titulo);
            
            
        }
        } catch (SQLException ex) {
                     
            JOptionPane.showMessageDialog(null, "Error Al Realizar Búsqueda"); 
            return; 
}
             break;
                 
                case 6:
        
         
           model.setRowCount(0);
        
       
            try {
                resultado = Conexion.consulta("Select * from [dbo].[NominaV] where "
                        + "[NombreCargo] like '%"+Buscar+"%'");
            
        
        while(resultado.next()){
           
           String [] Titulo = new String[24];
            
            Titulo [0] = String.valueOf(resultado.getInt(1));
            Titulo [1] = String.valueOf(resultado.getInt(2));
            Titulo [2] = String.valueOf(resultado.getDate(3));
            
            String Nombres = resultado.getString(4).trim();
            String Apellidos = resultado.getString(5).trim();
            
            Titulo [3] = Nombres.concat(" ").concat(Apellidos);
            Titulo [4] = resultado.getString(6);
            Titulo [5] = resultado.getString(7);
            Titulo [6] = resultado.getString(8);
            Titulo [7] = String.valueOf(resultado.getDouble(9));
            Titulo [8] = String.valueOf(resultado.getInt(10));
            Titulo [9] = String.valueOf(resultado.getDouble(11));
            Titulo [10] = String.valueOf(resultado.getInt(12));
            Titulo [11] = String.valueOf(resultado.getDouble(13));
            Titulo [12] = String.valueOf(resultado.getDouble(14));
            Titulo [13] = String.valueOf(resultado.getDouble(15));
            Titulo [14] = String.valueOf(resultado.getDouble(16));
            Titulo [15] = String.valueOf(resultado.getDouble(17));
            Titulo [16] = String.valueOf(resultado.getDouble(18));
            Titulo [17] = String.valueOf(resultado.getDouble(19));
            Titulo [18] = String.valueOf(resultado.getDouble(20));
            Titulo [19] = String.valueOf(resultado.getDouble(21));
            Titulo [20] = String.valueOf(resultado.getDouble(22));
            Titulo [21] = String.valueOf(resultado.getDouble(23));
            Titulo [22] = String.valueOf(resultado.getDouble(24));
            Titulo [23] = resultado.getString(25);
            
            model.addRow(Titulo);
           
            
            model.addRow(Titulo);
            
            
        }
        } catch (SQLException ex) {
                     
            JOptionPane.showMessageDialog(null, "Error Al Realizar Búsqueda"); 
            return; 
}
             break;
                
                case 7:
        
            model.setRowCount(0);
        
       
            try {
                resultado = Conexion.consulta("Select * from [dbo].[NominaV] where "
                        + "[Estado_Nomina] like '%"+Buscar+"%'");
            
        
        while(resultado.next()){
           
           String [] Titulo = new String[24];
            
            Titulo [0] = String.valueOf(resultado.getInt(1));
            Titulo [1] = String.valueOf(resultado.getInt(2));
            Titulo [2] = String.valueOf(resultado.getDate(3));
            
            String Nombres = resultado.getString(4).trim();
            String Apellidos = resultado.getString(5).trim();
            
            Titulo [3] = Nombres.concat(" ").concat(Apellidos);
            Titulo [4] = resultado.getString(6);
            Titulo [5] = resultado.getString(7);
            Titulo [6] = resultado.getString(8);
            Titulo [7] = String.valueOf(resultado.getDouble(9));
            Titulo [8] = String.valueOf(resultado.getInt(10));
            Titulo [9] = String.valueOf(resultado.getDouble(11));
            Titulo [10] = String.valueOf(resultado.getInt(12));
            Titulo [11] = String.valueOf(resultado.getDouble(13));
            Titulo [12] = String.valueOf(resultado.getDouble(14));
            Titulo [13] = String.valueOf(resultado.getDouble(15));
            Titulo [14] = String.valueOf(resultado.getDouble(16));
            Titulo [15] = String.valueOf(resultado.getDouble(17));
            Titulo [16] = String.valueOf(resultado.getDouble(18));
            Titulo [17] = String.valueOf(resultado.getDouble(19));
            Titulo [18] = String.valueOf(resultado.getDouble(20));
            Titulo [19] = String.valueOf(resultado.getDouble(21));
            Titulo [20] = String.valueOf(resultado.getDouble(22));
            Titulo [21] = String.valueOf(resultado.getDouble(23));
            Titulo [22] = String.valueOf(resultado.getDouble(24));
            Titulo [23] = resultado.getString(25);
            
            model.addRow(Titulo);
           
            
            model.addRow(Titulo);
            
            
        }
        } catch (SQLException ex) {
                     
            JOptionPane.showMessageDialog(null, "Error Al Realizar Búsqueda"); 
            return; 
}
         
             break;
                    
     
                  
               
               default:break;      
        }
     
  
     
        Tabla.setModel(model);
           
        
    }
        
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ver_Nomina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ver_Nomina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ver_Nomina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ver_Nomina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ver_Nomina().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tabla;
    private javax.swing.JComboBox cmbbuscar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField txtbuscar;
    // End of variables declaration//GEN-END:variables
}
