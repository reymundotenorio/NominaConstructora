package Ventanas;


import Clases.Conexion;
import Clases.HorasExtras;
import Clases.Nomina;
import Clases.Prestamo;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FI23
 */
public class Crear_Nomina extends javax.swing.JFrame {

    /**
     * Creates new form Ver
     */
    public Crear_Nomina() {
        initComponents();
         Tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
         rdMensual.setSelected(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        rdMensual = new javax.swing.JRadioButton();
        rdQuincenal = new javax.swing.JRadioButton();
        rdSemanal = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Crear Nómina");
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Tabla.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        Tabla.getTableHeader().setReorderingAllowed(false);
        Tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Tabla);

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jLabel1.setText("Periodo de Nómina: ");
        jPanel3.add(jLabel1);

        buttonGroup1.add(rdMensual);
        rdMensual.setText("Mensual");
        jPanel3.add(rdMensual);

        buttonGroup1.add(rdQuincenal);
        rdQuincenal.setText("Quincenal");
        jPanel3.add(rdQuincenal);

        buttonGroup1.add(rdSemanal);
        rdSemanal.setText("Semanal");
        jPanel3.add(rdSemanal);

        jPanel2.add(jPanel3);

        jButton1.setText("Ver Nómina Actual");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);

        jButton2.setText("Limpiar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2);

        jButton3.setText("Pagar y Guardar Nómina");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(890, 386));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

     DefaultTableModel model = new DefaultTableModel() {

    @Override
    public boolean isCellEditable(int row, int column) {
       //all cells false
       return false;
    }
}; 
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

       
        
        String [] Titulo = {"No.", "Fecha","Trabajador", "No. INSS", "Departamento", 
            "Cargo", "Salario Básico", "Horas Extras", "Ingreso Horas Extras","Años Antiguedad",
            "Ingreso Antiguedad",  "Total Ingresos", "INSS Laboral", "IR", "Total Deducciones", 
            "Salario Neto", "Otras Deducciones",  "Salario a Pagar", "INSS Patronal", "INATEC",
            "Vacaciones", "Treceavo Mes"};
        
        model.setColumnIdentifiers(Titulo);
        
        Tabla.setModel(model);
        
      
        
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
GenerarNomina();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void TablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMouseClicked


// TODO add your handling code here:
    }//GEN-LAST:event_TablaMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
model.setRowCount(0);
Tabla.setModel(model);// TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
 PagarNomina();
                // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    public void GuardarNomina(){
         int NoNomina = 0; int Dia; int Mes; int Anio; int ID_Trabajador; double SalarioBasico; 
  int CantidadHrsExtras; double PagoHrsExtras; int AniosAntiguedad; double IngAntiguedad; 
  double TotalIngresos; double INSS_L; double IR; double TotalDeducciones; double SalarioNeto;
  double OtrasDeducciones; double SalarioPagar; double INSS_P; double INATEC; double Vacaciones; 
  double TreceavoMes;
  
  String  Fecha1, IDTrabador1, SalarioBasico1, CantidadHrsExtras1, PagoHrsExtras1,
          AniosAntiguedad1, IngAntiguedad1, TotalIngresos1, INSS_L1, IR1, TotalDeducciones1,
          SalarioNeto1, OtrasDeducciones1, SalarioPagar1, INSS_P1, INACTEC1, Vacaciones1,
          TreceavoMes1;
  try{
  resultado = Conexion.consulta("Select Max([No_Nomina]) from [dbo].[Nomina]");
  
  while(resultado.next()){
      
      NoNomina = resultado.getInt(1);
  }
  }catch(SQLException ex){
      
  }
  
  NoNomina = NoNomina+1;
  
  if(Tabla.getRowCount()!=0){
  
   for(int k=0; k<Tabla.getRowCount();k++){
  
  ID_Trabajador = ID_Trab[k];
  
        Fecha1 = (String) Tabla.getValueAt(k, 1);
        SalarioBasico1 = (String) Tabla.getValueAt(k, 6);
        CantidadHrsExtras1 = (String) Tabla.getValueAt(k, 7);
        PagoHrsExtras1 = (String) Tabla.getValueAt(k, 8);
        AniosAntiguedad1 = (String) Tabla.getValueAt(k, 9);
        IngAntiguedad1 = (String) Tabla.getValueAt(k, 10);
        TotalIngresos1 = (String) Tabla.getValueAt(k, 11);
        INSS_L1 = (String) Tabla.getValueAt(k, 12);
        IR1 = (String) Tabla.getValueAt(k, 13);
        TotalDeducciones1 = (String) Tabla.getValueAt(k, 14);
        SalarioNeto1 = (String) Tabla.getValueAt(k, 15);
        OtrasDeducciones1 = (String) Tabla.getValueAt(k, 16);
        SalarioPagar1 = (String) Tabla.getValueAt(k, 17);
        INSS_P1 = (String) Tabla.getValueAt(k, 18);
        INACTEC1 = (String) Tabla.getValueAt(k, 19);
        Vacaciones1 = (String) Tabla.getValueAt(k, 20);
        TreceavoMes1 = (String) Tabla.getValueAt(k, 21);
        
        
        
 SimpleDateFormat formatoDelTexto = new SimpleDateFormat("dd-MM-yyyy");
          
Date FechaF = null;
try {

FechaF = formatoDelTexto.parse(Fecha1);

} catch (ParseException ex) {
}

SimpleDateFormat formatoDeFecha = new SimpleDateFormat("dd-MM-yyyy");
String FechaN = formatoDeFecha.format(FechaF);



String DiaC = null, MesC = null, AnoC = null;
 int j=0;
    
  
    
     StringTokenizer FC = new StringTokenizer(FechaN, "-");
                  
     while(FC.hasMoreTokens()){
         
                  if(j==2){
                      AnoC = FC.nextToken();
                      break;
                  }
                  
                   if(j==1){
                      
                      MesC= FC.nextToken();
                      j++;
                    }
                         
                    if(j==0){
                      
                      DiaC = FC.nextToken();
                     j++;
                    }
                    
                     }
                   
     Dia = Integer.parseInt(DiaC);
     Mes = Integer.parseInt(MesC);
     Anio = Integer.parseInt(AnoC);

        SalarioBasico = Double.valueOf(SalarioBasico1);
        CantidadHrsExtras = Integer.valueOf(CantidadHrsExtras1);
        PagoHrsExtras = Double.valueOf(PagoHrsExtras1);
        AniosAntiguedad = Integer.valueOf(AniosAntiguedad1);
        IngAntiguedad = Double.valueOf(IngAntiguedad1);
        TotalIngresos = Double.valueOf(TotalIngresos1);
        INSS_L = Double.valueOf(INSS_L1);
        IR = Double.valueOf(IR1);
        TotalDeducciones = Double.valueOf(TotalDeducciones1);
        SalarioNeto = Double.valueOf(SalarioNeto1);
        OtrasDeducciones = Double.valueOf(OtrasDeducciones1);
        SalarioPagar = Double.valueOf(SalarioPagar1);
        INSS_P = Double.valueOf(INSS_P1);
        INATEC = Double.valueOf(INACTEC1);
        Vacaciones = Double.valueOf(Vacaciones1);
        TreceavoMes = Double.valueOf(TreceavoMes1);
        
        Nomina.Agregar_Nomina(NoNomina, Dia, Mes, Anio, ID_Trabajador, SalarioBasico, CantidadHrsExtras, PagoHrsExtras, AniosAntiguedad, IngAntiguedad, TotalIngresos, INSS_L, IR, TotalDeducciones, SalarioNeto, OtrasDeducciones, SalarioPagar, INSS_P, INATEC, Vacaciones, TreceavoMes);
       
       
   }
   
   
        
    this.dispose();
  }
  else{
      JOptionPane.showMessageDialog(this, "Primero Genere La Nómina Para Guardar", 
              "Generar Nómina", JOptionPane.ERROR_MESSAGE);
     
  }
    }
    
    public void PagarNomina (){
         int NoNomina = 0; int Dia; int Mes; int Anio; int ID_Trabajador; double SalarioBasico; 
  int CantidadHrsExtras; double PagoHrsExtras; int AniosAntiguedad; double IngAntiguedad; 
  double TotalIngresos; double INSS_L; double IR; double TotalDeducciones; double SalarioNeto;
  double OtrasDeducciones; double SalarioPagar; double INSS_P; double INATEC; double Vacaciones; 
  double TreceavoMes;
  
  String  Fecha1, IDTrabador1, SalarioBasico1, CantidadHrsExtras1, PagoHrsExtras1,
          AniosAntiguedad1, IngAntiguedad1, TotalIngresos1, INSS_L1, IR1, TotalDeducciones1,
          SalarioNeto1, OtrasDeducciones1, SalarioPagar1, INSS_P1, INACTEC1, Vacaciones1,
          TreceavoMes1;
  try{
  resultado = Conexion.consulta("Select Max([No_Nomina]) from [dbo].[Nomina]");
  
  while(resultado.next()){
      
      NoNomina = resultado.getInt(1);
  }
  }catch(SQLException ex){
      
  }
  
  NoNomina = NoNomina+1;
  
  if(Tabla.getRowCount()!=0){
  
   for(int k=0; k<Tabla.getRowCount();k++){
  
  ID_Trabajador = ID_Trab[k];
  
      
        Fecha1 = (String) Tabla.getValueAt(k, 1);
        SalarioBasico1 = (String) Tabla.getValueAt(k, 6);
        CantidadHrsExtras1 = (String) Tabla.getValueAt(k, 7);
        PagoHrsExtras1 = (String) Tabla.getValueAt(k, 8);
        AniosAntiguedad1 = (String) Tabla.getValueAt(k, 9);
        IngAntiguedad1 = (String) Tabla.getValueAt(k, 10);
        TotalIngresos1 = (String) Tabla.getValueAt(k, 11);
        INSS_L1 = (String) Tabla.getValueAt(k, 12);
        IR1 = (String) Tabla.getValueAt(k, 13);
        TotalDeducciones1 = (String) Tabla.getValueAt(k, 14);
        SalarioNeto1 = (String) Tabla.getValueAt(k, 15);
        OtrasDeducciones1 = (String) Tabla.getValueAt(k, 16);
        SalarioPagar1 = (String) Tabla.getValueAt(k, 17);
        INSS_P1 = (String) Tabla.getValueAt(k, 18);
        INACTEC1 = (String) Tabla.getValueAt(k, 19);
        Vacaciones1 = (String) Tabla.getValueAt(k, 20);
        TreceavoMes1 = (String) Tabla.getValueAt(k, 21);
        
        
        
 SimpleDateFormat formatoDelTexto = new SimpleDateFormat("dd-MM-yyyy");
          
Date FechaF = null;
try {

FechaF = formatoDelTexto.parse(Fecha1);

} catch (ParseException ex) {
}

SimpleDateFormat formatoDeFecha = new SimpleDateFormat("dd-MM-yyyy");
String FechaN = formatoDeFecha.format(FechaF);



String DiaC = null, MesC = null, AnoC = null;
 int j=0;
    
  
    
     StringTokenizer FC = new StringTokenizer(FechaN, "-");
                  
     while(FC.hasMoreTokens()){
         
                  if(j==2){
                      AnoC = FC.nextToken();
                      break;
                  }
                  
                   if(j==1){
                      
                      MesC= FC.nextToken();
                      j++;
                    }
                         
                    if(j==0){
                      
                      DiaC = FC.nextToken();
                     j++;
                    }
                    
                     }
                   
     Dia = Integer.parseInt(DiaC);
     Mes = Integer.parseInt(MesC);
     Anio = Integer.parseInt(AnoC);

        SalarioBasico = Double.valueOf(SalarioBasico1);
        CantidadHrsExtras = Integer.valueOf(CantidadHrsExtras1);
        PagoHrsExtras = Double.valueOf(PagoHrsExtras1);
        AniosAntiguedad = Integer.valueOf(AniosAntiguedad1);
        IngAntiguedad = Double.valueOf(IngAntiguedad1);
        TotalIngresos = Double.valueOf(TotalIngresos1);
        INSS_L = Double.valueOf(INSS_L1);
        IR = Double.valueOf(IR1);
        TotalDeducciones = Double.valueOf(TotalDeducciones1);
        SalarioNeto = Double.valueOf(SalarioNeto1);
        OtrasDeducciones = Double.valueOf(OtrasDeducciones1);
        SalarioPagar = Double.valueOf(SalarioPagar1);
        INSS_P = Double.valueOf(INSS_P1);
        INATEC = Double.valueOf(INACTEC1);
        Vacaciones = Double.valueOf(Vacaciones1);
        TreceavoMes = Double.valueOf(TreceavoMes1);
        
        Nomina.Agregar_Nomina(NoNomina, Dia, Mes, Anio, ID_Trabajador, SalarioBasico, CantidadHrsExtras, PagoHrsExtras, AniosAntiguedad, IngAntiguedad, TotalIngresos, INSS_L, IR, TotalDeducciones, SalarioNeto, OtrasDeducciones, SalarioPagar, INSS_P, INATEC, Vacaciones, TreceavoMes);
      
        if(CantidadHrsExtras!=0){
        HorasExtras.Pagar_Horas(ID_Trabajador);
        }
        if(OtrasDeducciones!=0){
        Prestamo.Pagar_Prestamo(ID_Trabajador);
        }
   }
   
   Nomina.Pagar_Nomina(NoNomina);
        
    this.dispose();
  }
   else{
      JOptionPane.showMessageDialog(this, "Primero Genere La Nómina Para Guardar y Pagar", 
              "Generar Nómina", JOptionPane.ERROR_MESSAGE);
     
  }
    }
    ResultSet resultado;
    ResultSet resultado1;
    ResultSet resultado2;
    
    int [] ID_Trab;
    
    public void GenerarNomina(){
        
         String dia, mes, ano;

        Calendar c = new GregorianCalendar();

        dia = Integer.toString(c.get(Calendar.DATE));
        mes = Integer.toString(c.get(Calendar.MONTH)+1);
        ano = Integer.toString(c.get(Calendar.YEAR));

        
        String Fecha =dia+"-"+mes+"-"+ano ;
        
        model.setRowCount(0);
        
        int Periodo = 0;
        
        if(rdMensual.isSelected()){
        Periodo = 30;
        }
        if(rdSemanal.isSelected()){
        Periodo = 7;
        }
        if(rdQuincenal.isSelected()){
        Periodo = 15;
        }
        int i = 1;
        
        int MaxID = 0;
        
           
        try{
        resultado = Conexion.consulta("Select Max(ID_Trabajador) from [dbo].[Trabajador]");
        
        while(resultado.next()){
            MaxID = resultado.getInt(1);
        }
        }catch(SQLException ex){
            
        }
        
      
        
        ID_Trab = new int[MaxID];
        int j = 0;
        
         try {
                resultado = Conexion.consulta("Select [ID_Trabajador], [No_Inss], [Nombres_Trabajador],"
                        + " [Apellidos_Trabajador], [NombreDepartamento], [NombreCargo], [Salario], "
                        + " [Anios_Antiguedad]  from [dbo].[TrabajadorV] where"
                        + " [Estado_Trabajador] = 'Activo'");
            
        
        while(resultado.next()){
          
            int ID_Trabajador = resultado.getInt(1);
            String NoINSS = resultado.getString(2).trim();
            String Nombres = resultado.getString(3).trim();
            String Apellidos = resultado.getString(4).trim();
            String Departamento = resultado.getString(5).trim();
            String Cargo = resultado.getString(6).trim();
            double Salario = resultado.getDouble(7);
            int Antiguedad = resultado.getInt(8);
        
             ID_Trab [j] = ID_Trabajador;
           
            j=j+1;
            Nomina(ID_Trabajador, NoINSS, Nombres, Apellidos, 
                    Departamento, Cargo, Salario, Antiguedad, Periodo, Fecha, i);
            
            i = i+1;
                    
            
            
        }
        
    }   catch (SQLException ex) {
            Logger.getLogger(Crear_Nomina.class.getName()).log(Level.SEVERE, null, ex);
        }
    
         
     Tabla.setModel(model);
        
   
    }  
    
    public void Nomina (int ID_Trabajador, String NoINSS, String Nombres, String Apellidos,
            String Departamento, String Cargo, double Salario, int Antiguedad, int Periodo, 
            String Fecha, int i){
        double SalarioMensual = Salario;
            
            if(Periodo == 15){
                Salario = Salario /2;
            }
            
            if(Periodo == 7){
                Salario = Salario /4;
            }
            
            
            DecimalFormat df = new DecimalFormat("#0.00");
            
            String [] Datos = new String[22];

            Datos [0] = String.valueOf(i);
            Datos [1] = Fecha;
            Datos [2] = Nombres.concat(" ").concat(Apellidos);
            Datos [3] = NoINSS;
            Datos [4] = Departamento;
            Datos [5] = Cargo;
            Datos [6] = df.format(Salario);
            
            
 
           
            int Horas = HorasExtras(ID_Trabajador);
            
            Datos [7] = String.valueOf(Horas);
            Datos [8] = df.format(IngresosHrsExtras(Horas, SalarioMensual, Periodo));
            Datos [9] = String.valueOf(Antiguedad);
            Datos [10] = df.format(IngresoAntiguedad(Antiguedad, SalarioMensual, Periodo));
            double TotalIngresos = Salario + IngresosHrsExtras(Horas, SalarioMensual, Periodo)
                    + IngresoAntiguedad(Antiguedad, SalarioMensual, Periodo);
            Datos [11] = df.format(TotalIngresos);
            Datos [12] = df.format(INSSLaboral(TotalIngresos, Periodo));
            Datos [13] = df.format(IR(TotalIngresos,INSSLaboral(TotalIngresos, Periodo), Periodo));
            double TotalDeducciones = INSSLaboral(TotalIngresos, Periodo) + 
                    IR(TotalIngresos,INSSLaboral(TotalIngresos, Periodo), Periodo);
            Datos [14] = df.format(TotalDeducciones);
            double SalarioNeto = TotalIngresos - TotalDeducciones;
            Datos [15] = df.format(SalarioNeto);
            
            double Prestamo = Prestamo(ID_Trabajador);
            
            Datos [16] = df.format(Prestamo);
            double SalarioPagar = SalarioNeto - Prestamo;
            Datos [17] = df.format(SalarioPagar);
            Datos [18] = df.format(INSSPatronal(TotalIngresos));
            Datos [19] = df.format(INATEC(TotalIngresos));
            Datos [20] = df.format(Vacaciones(SalarioMensual, Periodo));
            Datos [21] = df.format(Vacaciones(SalarioMensual, Periodo));
            
            model.addRow(Datos);
    }
    
    public double IngresosHrsExtras (int Horas, double Salario, int Periodo){
       double Ingresos = 0;
       
       int a = Periodo*8;
       int b = Horas*2;
       double c = Salario/a;
       double x = c * b;
 
       Ingresos = x;
        
        return Ingresos;
    }
    
     public double INSSLaboral (double Salario, int Periodo){
       double INSSL = 0;
       
       INSSL = Salario*0.625;
       
       INSSL = INSSL / 12;
       
       if(Periodo == 15){
            INSSL = INSSL / 24;
       }
       if(Periodo == 7){
            INSSL = INSSL / 52;
       }
        return INSSL;
    }
     
       public double INSSPatronal (double TotalIngresos){
       double INSSP = 0;
       
       INSSP = TotalIngresos*0.18;
        return INSSP;
    }
       
        public double INATEC (double TotalIngresos){
       double INSSP = 0;
       
       INSSP = TotalIngresos*0.02;
        return INSSP;
    }
        
          public double Vacaciones (double Salario, int Periodo){
       double Vacaciones = 0;
       
       Vacaciones = Salario / 12;
       
       if(Periodo == 15){
           Vacaciones = Salario / 24;
       }
       
       if(Periodo == 7){
           Vacaciones = Salario / 52;
       }
       
        return Vacaciones;
    }
    
     public double IR (double TotalIngreso, double INSSL, int Periodo){
         double IR = 0;
         
         double a = TotalIngreso - INSSL;
         
         double b = a * 12;
         
         if(Periodo == 15){
             
             b = a * 24;
         }
         
         if(Periodo == 7){
             
             b = a * 52;
         }
         
         double Porcentaje = 0, Base = 0, Exceso = 0;
         
         if(b>0 && b<=50000){
             Porcentaje = 0;
             Base = 0;
             Exceso = 0;
         }
         if(b>50001 && b<=100000){
             Porcentaje = 0.10;
             Base = 0;
             Exceso = 50000;
         }
         if(b>100001 && b<=200000){
             Porcentaje = 0.15;
             Base = 5000;
             Exceso = 100000;
         }
         if(b>200001 && b<=300000){
             Porcentaje = 0.20;
             Base = 20000;
             Exceso = 200000;
         }
         if(b>300001 && b<=500000){
             Porcentaje = 0.25;
             Base = 40000;
             Exceso = 300000;
         }
         if(b>500001){
             Porcentaje = 0.30;
             Base = 90000;
             Exceso = 500000;
         }
         
         double c = b-Exceso;
         double d = c * Porcentaje;
         double e = d + Base;
         
         double f = e/12;
         
         if (Periodo == 15){
             f = e/24;
         }
         
          if (Periodo == 7){
             f = e/52;
         }
         
          IR = f;
         
        return IR; 
     }
    
     
    public double IngresoAntiguedad (int Antiguedad, double Salario, int Periodo){
       double IAntiguedad = 0;
       
       double Porcentaje = 0;
       
       if(Antiguedad<=20){
      switch (Antiguedad){
          
              case 1 : Porcentaje = 0.03;
              break;
              case 2 : Porcentaje = 0.05;
              break;
              case 3 : Porcentaje = 0.07;
              break;
              case 4 : Porcentaje = 0.09;
              break;
              case 5 : Porcentaje = 0.10;
              break;
              case 6 : Porcentaje = 0.11;
              break;
              case 7 : Porcentaje = 0.12;
              break;
              case 8 : Porcentaje = 0.13;
              break;
              case 9 : Porcentaje = 0.14;
              break;
              case 10 : Porcentaje = 0.15;
              break;
              case 11 : Porcentaje = 0.155;
              break;
              case 12 : Porcentaje = 0.16;
              break;
              case 13 : Porcentaje = 0.165;
              break;
              case 14 : Porcentaje = 0.17;
              break;
              case 15 : Porcentaje = 0.175;
              break;
              case 16 : Porcentaje = 0.18;
              break;
              case 17 : Porcentaje = 0.185;
              break;
              case 18 : Porcentaje = 0.19;
              break;
              case 19 : Porcentaje = 0.195;
              break;
              case 20 : Porcentaje = 0.20;
              break;
              default: break;
                      
              
      }
       }
       else{
           Porcentaje = 0.20;
       }
      
       double Anti = Salario * Porcentaje;
       
       IAntiguedad = Anti;
       
       if(Periodo == 15){
           IAntiguedad = Anti/2;
       }
       if(Periodo == 7){
           IAntiguedad = Anti/4;
       }
       
       
        
        return IAntiguedad;
    }
    
    
    public int HorasExtras(int ID){
        int Horas = 0;
        
        
         try {
                resultado1 = Conexion.consulta("Select [HrsExtras] from [dbo].[HrsExtras] where"
                        + "[Estado_Hrs] = 'No Cancelado' and [ID_Trabajador] = "+ID);
            
        
        while(resultado1.next()){
           Horas = Horas + resultado1.getInt(1);  
        }
        } catch (SQLException ex) {
                     
            
}
        
        return Horas;
    }
    
    public double Prestamo(int ID){
        double Prestamo = 0;
        
        
         try {
                resultado2 = Conexion.consulta("Select [Prestamo] from [dbo].[Prestamo] where"
                        + "[Estado_Prestamo] = 'No Cancelado' and [ID_Trabajador] = "+ID);
            
        
        while(resultado2.next()){
           Prestamo = Prestamo + resultado2.getDouble(1);  
        }
        } catch (SQLException ex) {
                     
            
}
        
        return Prestamo;
    }
    
    public void Buscar(){
        
        
//        int index = cmbbuscar.getSelectedIndex()+1;
//        
//        String Buscar = txtbuscar.getText();
//        
//     switch (index){
//         
//         case 1:
//        
//          model.setRowCount(0);
//        
//       
//            try {
//                resultado = Conexion.consulta("Select * from [dbo].[Departamento] where "
//                        + "[ID_Departamento] like '%"+Buscar+"%'");
//            
//        
//        while(resultado.next()){
//           
//             String [] Titulo = new String[2];
//            
//            Titulo [0] = String.valueOf(resultado.getInt(1));
//            Titulo [1] = resultado.getString(2);
//           
//            
//            model.addRow(Titulo);
//            
//            
//        }
//        } catch (SQLException ex) {
//                     
//            JOptionPane.showMessageDialog(null, "Error Al Realizar Búsqueda");  
//            return; 
//}
//             break;
//      
//             
//             
//               case 2:
//        
//        
//          model.setRowCount(0);
//        
//       
//            try {
//                resultado = Conexion.consulta("Select * from [dbo].[Departamento] where "
//                        + "[NombreDepartamento] like '%"+Buscar+"%'");
//            
//        
//        while(resultado.next()){
//           
//             String [] Titulo = new String[2];
//            
//            Titulo [0] = String.valueOf(resultado.getInt(1));
//            Titulo [1] = resultado.getString(2);
//           
//            
//            model.addRow(Titulo);
//            
//            
//        }
//        } catch (SQLException ex) {
//                     
//            JOptionPane.showMessageDialog(null, "Error Al Realizar Búsqueda"); 
//            return; 
//}
//             break;
//                   
//                  
//               
//               default:break;      
//        }
//     
//  
//     
//        Tabla.setModel(model);
           
        
    }
        
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Crear_Nomina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Crear_Nomina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Crear_Nomina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Crear_Nomina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Crear_Nomina().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tabla;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton rdMensual;
    private javax.swing.JRadioButton rdQuincenal;
    private javax.swing.JRadioButton rdSemanal;
    // End of variables declaration//GEN-END:variables
}
